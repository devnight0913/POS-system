{"version":3,"file":"/js/dselect.js","mappings":"0hCAyOc,GAAGA,MAAMC,KAAKC,SAASC,iBAAiB,aAC9CC,KAAI,SAAUC,IAvJtB,SAAiBC,GAAiB,IAAbC,EAAS,UAAH,6CAAG,CAAC,EAC3BD,EAAGE,MAAMC,QAAU,OACnB,IAAMC,EAAe,kBACfC,EAAiB,qBACjBC,EAAW,cACXC,EAAiB,qBACjBC,EAAmB,sBACnBC,EAAgB,gBAChBC,EAAwB,oBACxBC,GAAgB,EAChBC,GAAmB,EACnBC,GAAmB,EACnBC,EAAmB,QACnBC,EAAc,GACdC,EAASC,EAAS,WAAahB,EAAOe,QAAUL,EAChDO,EAAYD,EAAS,cAAgBhB,EAAOiB,WAAaN,EACzDO,EAAYF,EAAS,cAAgBhB,EAAOkB,WAAaN,EACzDO,EAAYpB,EAAGqB,QAAQC,kBAAoBrB,EAAOmB,WAAaN,EACjES,EAAOvB,EAAGqB,QAAQG,aAAevB,EAAOsB,MAAQR,EACpDQ,EAAgB,KAATA,EAAc,gBAAH,OAAmBA,GAAS,GAC9C,IAAME,EAAe,cAAH,OAAiBF,GAE7BG,EAAcV,EAAM,kGACoEZ,EAAY,eAAOqB,EAAY,cAAMP,EAAS,uEACtI,GAEN,SAASD,EAASU,GACd,IAAMC,EAAY,gBAAH,OAAmBD,GAClC,OAAK3B,EAAG6B,aAAaD,GAGU,SADjB5B,EAAG8B,aAAaF,GACjBG,cAH2B,IAI5C,CAEA,SAASC,IACDhC,EAAGiC,oBAAsBjC,EAAGiC,mBAAmBC,WAAalC,EAAGiC,mBAAmBC,UAAUC,SAAS/B,IACrGJ,EAAGiC,mBAAmBG,QAE9B,CAEA,SAASC,EAAcpC,GACnB,MAAwC,KAAjCA,EAAO6B,aAAa,QAC/B,CAEA,SAASQ,EAAYC,EAASC,GAC1B,GAAIA,EAAU,CACV,IAAMC,EAAkBC,MAAMC,KAAKJ,GAASK,QAAO,SAAA3C,GAAM,OAAIA,EAAO4C,WAAaR,EAAcpC,EAAO,IAChG6C,EAAoBJ,MAAMC,KAAKJ,GAASK,QAAO,SAAA3C,GAAM,OAAIoC,EAAcpC,EAAO,IAChF8C,EAAM,GACV,GAA+B,IAA3BN,EAAgBO,OAAc,CAC9B,IAAMC,EAAOH,EAAkBE,OAASF,EAAkB,GAAGI,YAAc,SAC3EH,EAAII,KAAK,gBAAD,OAAiB3C,EAAgB,aAAKyC,EAAI,WACtD,KAAO,KACiCG,EADjC,IACkBX,GAAe,IAApC,IAAK,EAAL,qBAAsC,KAA3BxC,EAAM,QACb8C,EAAII,KAAK,6BAAD,OACF7C,EAAQ,iCAAyBL,EAAOoD,MAAK,6BACvDpD,EAAOgD,KAAI,kEAC2B7C,EAAY,eAAOqB,EAAY,uBAAclB,EAAc,8WAGjG,CAAC,UAAA+C,EAAAA,EAAAA,EAAA,SAAAA,EAAAA,GAAA,CACL,CACA,OAAOP,EAAIQ,KAAK,GACpB,CACI,IAAMC,EAAiBjB,EAAQA,EAAQkB,eACvC,OAAOpB,EAAcmB,GAAkB,gBAAH,OAAmBhD,EAAgB,aAAKgD,EAAeE,UAAS,WAAYF,EAAeE,SAEvI,CAEA,SAASC,EAAapB,GAClB,IAAMiB,EAAiBjB,EAAQA,EAAQkB,eACvC,OAAOpB,EAAcmB,GAAkB,GAAKA,EAAeN,WAC/D,CAEA,SAASU,EAASrB,GACd,IAC4BsB,EADxBC,EAAQ,GAAG,IACMvB,GAAO,IAA5B,IAAK,EAAL,qBAA8B,KAAnBtC,EAAM,QACb,GAAuB,aAAnBA,EAAO8D,QACPD,EAAMX,KAAK,+BAAD,OAAgClD,EAAO6B,aAAa,SAAQ,cACnE,CACH,IAAMkC,EAAS3B,EAAcpC,GAAU,UAAY,GAC7CgE,EAAShE,EAAO4C,SAAW,UAAY,GACvCqB,EAAWlE,EAAGwC,UAAYvC,EAAO4C,SAAW,YAAc,GAC1DQ,EAAQpD,EAAOoD,MACfJ,EAAOhD,EAAOiD,YACpBY,EAAMX,KAAK,UAAD,OACIa,EAAM,gCAAwBC,EAAM,iCAAyBZ,EAAK,0DAAiDjD,EAAY,eAAOqB,EAAY,eAAMyC,EAAQ,YAAIjB,EAAI,aAE1L,CACJ,CAAC,UAAAkB,EAAAA,EAAAA,EAAA,SAAAA,EAAAA,GAAA,CAED,OADQL,EAAMP,KAAK,GAEvB,CAEA,SAASa,IACL,IAAMC,EAAYrE,EAAGwC,SAAW,gCAAkC,GAC5D8B,EAAkB5B,MAAMC,KAAK3C,EAAGkC,WACjCU,QAAO,SAAA2B,GACJ,MAAqB,gBAAdA,GAA6C,mBAAdA,GAAgD,mBAAdA,CAC5E,IACChB,KAAK,KACJiB,EACFrD,IAAcnB,EAAGwC,SAAQ,iDAEE/B,EAAa,mEAA0DL,EAAY,6RAOxG,GACJqE,EAAW,8BAAH,OACKrE,EAAY,YAAIkE,EAAe,oCACnC7C,EAAY,aAAKzB,EAAGwC,UAAYrB,EAAYT,EAAwB,GAAE,iCAChFV,EAAGwC,UAAYmB,EAAa3D,EAAGuC,SAAQ,0EACsB8B,EAAS,sBACzE/B,EAAYtC,EAAGuC,QAASvC,EAAGwC,UAAS,yIAIlCd,EAAW,oEACkCN,EAAS,yCACpDwC,EAAS5D,EAAGH,iBAAiB,MAAK,qDAExBQ,EAAc,gFAG9BmE,EAAQ,sBAGRxC,IACAhC,EAAG0E,mBAAmB,WAAYD,EACtC,CAGA,SAASE,IACL,IAAMC,EAAW5E,EAAGiC,mBACd4C,EAAUD,EAASE,uBAAuBrD,GAAc,GACxDsD,EAAeH,EAASE,uBAAuB,iBAAiB,GACtED,EAAQnB,UAAYpB,EAAYtC,EAAGuC,QAASvC,EAAGwC,UAC/CuC,EAAarB,UAAYE,EAAS5D,EAAGH,iBAAiB,MACjDG,EAAGwC,WACJqC,EAAQxD,QAAQ2D,YAAcrB,EAAa3D,EAAGuC,SAEtD,CAXA6B,IAaApE,EAAGiF,iBAAiB,SAAUN,EAClC,CAIIO,CAAQnF,EAAQ,CACZiB,QAAQ,EACRE,WAAW,EACXC,WAAW,EACXC,UAAW,QACXG,KAAM,IAEd,G","sources":["webpack:///./resources/js/dselect.js"],"sourcesContent":["function dselectUpdate(button, classElement, classToggler) {\r\n    const value = button.dataset.dselectValue;\r\n    const target = button.closest(`.${classElement}`).previousElementSibling;\r\n    const toggler = target.nextElementSibling.getElementsByClassName(classToggler)[0];\r\n    const input = target.nextElementSibling.querySelector('input');\r\n    if (target.multiple) {\r\n        Array.from(target.options).filter(option => option.value === value)[0].selected = true;\r\n    } else {\r\n        target.value = value;\r\n    }\r\n    if (target.multiple) {\r\n        toggler.click();\r\n    }\r\n    target.dispatchEvent(new Event('change'));\r\n    toggler.focus();\r\n    if (input) {\r\n        input.value = '';\r\n    }\r\n}\r\nfunction dselectRemoveTag(button, classElement, classToggler) {\r\n    const value = button.parentNode.dataset.dselectValue;\r\n    const target = button.closest(`.${classElement}`).previousElementSibling;\r\n    const toggler = target.nextElementSibling.getElementsByClassName(classToggler)[0];\r\n    const input = target.nextElementSibling.querySelector('input');\r\n    Array.from(target.options).filter(option => option.value === value)[0].selected = false;\r\n    target.dispatchEvent(new Event('change'));\r\n    toggler.click();\r\n    if (input) {\r\n        input.value = '';\r\n    }\r\n}\r\nfunction dselectSearch(event, input, classElement, classToggler, creatable) {\r\n    const filterValue = input.value.toLowerCase().trim();\r\n    const itemsContainer = input.nextElementSibling;\r\n    const headers = itemsContainer.querySelectorAll('.dropdown-header');\r\n    const items = itemsContainer.querySelectorAll('.dropdown-item');\r\n    const noResults = itemsContainer.nextElementSibling;\r\n\r\n    headers.forEach(i => i.classList.add('d-none'));\r\n\r\n    for (const item of items) {\r\n        const filterText = item.textContent;\r\n\r\n        if (filterText.toLowerCase().indexOf(filterValue) > -1) {\r\n            item.classList.remove('d-none');\r\n            let header = item;\r\n            while ((header = header.previousElementSibling)) {\r\n                if (header.classList.contains('dropdown-header')) {\r\n                    header.classList.remove('d-none');\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            item.classList.add('d-none');\r\n        }\r\n    }\r\n    const found = Array.from(items).filter(i => !i.classList.contains('d-none') && !i.hasAttribute('hidden'));\r\n    if (found.length < 1) {\r\n        noResults.classList.remove('d-none');\r\n        itemsContainer.classList.add('d-none');\r\n        if (creatable) {\r\n            noResults.innerHTML = `Press Enter to add \"<strong>${input.value}</strong>\"`;\r\n            if (event.key === 'Enter') {\r\n                const target = input.closest(`.${classElement}`).previousElementSibling;\r\n                const toggler = target.nextElementSibling.getElementsByClassName(classToggler)[0];\r\n                target.insertAdjacentHTML('afterbegin', `<option value=\"${input.value}\" selected>${input.value}</option>`);\r\n                target.dispatchEvent(new Event('change'));\r\n                input.value = '';\r\n                input.dispatchEvent(new Event('keyup'));\r\n                toggler.click();\r\n                toggler.focus();\r\n            }\r\n        }\r\n    } else {\r\n        noResults.classList.add('d-none');\r\n        itemsContainer.classList.remove('d-none');\r\n    }\r\n}\r\nfunction dselectClear(button, classElement) {\r\n    const target = button.closest(`.${classElement}`).previousElementSibling;\r\n    Array.from(target.options).forEach(option => (option.selected = false));\r\n    target.dispatchEvent(new Event('change'));\r\n}\r\nfunction dselect(el, option = {}) {\r\n    el.style.display = 'none';\r\n    const classElement = 'dselect-wrapper';\r\n    const classNoResults = 'dselect-no-results';\r\n    const classTag = 'dselect-tag';\r\n    const classTagRemove = 'dselect-tag-remove';\r\n    const classPlaceholder = 'dselect-placeholder';\r\n    const classClearBtn = 'dselect-clear';\r\n    const classTogglerClearable = 'dselect-clearable';\r\n    const defaultSearch = false;\r\n    const defaultCreatable = false;\r\n    const defaultClearable = false;\r\n    const defaultMaxHeight = '360px';\r\n    const defaultSize = '';\r\n    const search = attrBool('search') || option.search || defaultSearch;\r\n    const creatable = attrBool('creatable') || option.creatable || defaultCreatable;\r\n    const clearable = attrBool('clearable') || option.clearable || defaultClearable;\r\n    const maxHeight = el.dataset.dselectMaxHeight || option.maxHeight || defaultMaxHeight;\r\n    let size = el.dataset.dselectSize || option.size || defaultSize;\r\n    size = size !== '' ? ` form-select-${size}` : '';\r\n    const classToggler = `form-select${size}`;\r\n\r\n    const searchInput = search\r\n        ? `<input onkeydown=\"return event.key !== 'Enter'\" onkeyup=\"dselectSearch(event, this, '${classElement}', '${classToggler}', ${creatable})\" type=\"text\" class=\"form-control\" placeholder=\"Search\" autofocus>`\r\n        : '';\r\n\r\n    function attrBool(attr) {\r\n        const attribute = `data-dselect-${attr}`;\r\n        if (!el.hasAttribute(attribute)) return null;\r\n\r\n        const value = el.getAttribute(attribute);\r\n        return value.toLowerCase() === 'true';\r\n    }\r\n\r\n    function removePrev() {\r\n        if (el.nextElementSibling && el.nextElementSibling.classList && el.nextElementSibling.classList.contains(classElement)) {\r\n            el.nextElementSibling.remove();\r\n        }\r\n    }\r\n\r\n    function isPlaceholder(option) {\r\n        return option.getAttribute('value') === '';\r\n    }\r\n\r\n    function selectedTag(options, multiple) {\r\n        if (multiple) {\r\n            const selectedOptions = Array.from(options).filter(option => option.selected && !isPlaceholder(option));\r\n            const placeholderOption = Array.from(options).filter(option => isPlaceholder(option));\r\n            let tag = [];\r\n            if (selectedOptions.length === 0) {\r\n                const text = placeholderOption.length ? placeholderOption[0].textContent : '&nbsp;';\r\n                tag.push(`<span class=\"${classPlaceholder}\">${text}</span>`);\r\n            } else {\r\n                for (const option of selectedOptions) {\r\n                    tag.push(`\r\n            <div class=\"${classTag}\" data-dselect-value=\"${option.value}\">\r\n              ${option.text}\r\n              <svg onclick=\"dselectRemoveTag(this, '${classElement}', '${classToggler}')\" class=\"${classTagRemove}\" width=\"14\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"/></svg>\r\n            </div>\r\n          `);\r\n                }\r\n            }\r\n            return tag.join('');\r\n        } else {\r\n            const selectedOption = options[options.selectedIndex];\r\n            return isPlaceholder(selectedOption) ? `<span class=\"${classPlaceholder}\">${selectedOption.innerHTML}</span>` : selectedOption.innerHTML;\r\n        }\r\n    }\r\n\r\n    function selectedText(options) {\r\n        const selectedOption = options[options.selectedIndex];\r\n        return isPlaceholder(selectedOption) ? '' : selectedOption.textContent;\r\n    }\r\n\r\n    function itemTags(options) {\r\n        let items = [];\r\n        for (const option of options) {\r\n            if (option.tagName === 'OPTGROUP') {\r\n                items.push(`<h6 class=\"dropdown-header\">${option.getAttribute('label')}</h6>`);\r\n            } else {\r\n                const hidden = isPlaceholder(option) ? ' hidden' : '';\r\n                const active = option.selected ? ' active' : '';\r\n                const disabled = el.multiple && option.selected ? ' disabled' : '';\r\n                const value = option.value;\r\n                const text = option.textContent;\r\n                items.push(\r\n                    `<button${hidden} class=\"dropdown-item${active}\" data-dselect-value=\"${value}\" type=\"button\" onclick=\"dselectUpdate(this, '${classElement}', '${classToggler}')\"${disabled}>${text}</button>`\r\n                );\r\n            }\r\n        }\r\n        items = items.join('');\r\n        return items;\r\n    }\r\n\r\n    function createDom() {\r\n        const autoclose = el.multiple ? ' data-bs-auto-close=\"outside\"' : '';\r\n        const additionalClass = Array.from(el.classList)\r\n            .filter(className => {\r\n                return className !== 'form-select' && className !== 'form-select-sm' && className !== 'form-select-lg';\r\n            })\r\n            .join(' ');\r\n        const clearBtn =\r\n            clearable && !el.multiple\r\n                ? `\r\n    <button type=\"button\" class=\"btn ${classClearBtn}\" title=\"Clear selection\" onclick=\"dselectClear(this, '${classElement}')\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14 14\" fill=\"none\">\r\n        <path d=\"M13 1L0.999999 13\" stroke-width=\"2\" stroke=\"currentColor\"></path>\r\n        <path d=\"M1 1L13 13\" stroke-width=\"2\" stroke=\"currentColor\"></path>\r\n      </svg>\r\n    </button>\r\n    `\r\n                : '';\r\n        const template = `\r\n    <div class=\"dropdown ${classElement} ${additionalClass}\">\r\n      <button class=\"${classToggler} ${!el.multiple && clearable ? classTogglerClearable : ''}\" data-dselect-text=\"${\r\n            !el.multiple && selectedText(el.options)\r\n        }\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"${autoclose}>\r\n        ${selectedTag(el.options, el.multiple)}\r\n      </button>\r\n      <div class=\"dropdown-menu shadow-sm rounded-3\">\r\n        <div class=\"d-flex flex-column\">\r\n          ${searchInput}\r\n          <div class=\"dselect-items\" style=\"max-height:${maxHeight};overflow:auto\">\r\n            ${itemTags(el.querySelectorAll('*'))}\r\n          </div>\r\n          <div class=\"${classNoResults} d-none\">No results found</div>\r\n        </div>\r\n      </div>\r\n      ${clearBtn}\r\n    </div>\r\n    `;\r\n        removePrev();\r\n        el.insertAdjacentHTML('afterend', template); // insert template after element\r\n    }\r\n    createDom();\r\n\r\n    function updateDom() {\r\n        const dropdown = el.nextElementSibling;\r\n        const toggler = dropdown.getElementsByClassName(classToggler)[0];\r\n        const dSelectItems = dropdown.getElementsByClassName('dselect-items')[0];\r\n        toggler.innerHTML = selectedTag(el.options, el.multiple);\r\n        dSelectItems.innerHTML = itemTags(el.querySelectorAll('*'));\r\n        if (!el.multiple) {\r\n            toggler.dataset.dselectText = selectedText(el.options);\r\n        }\r\n    }\r\n\r\n    el.addEventListener('change', updateDom);\r\n}\r\n\r\nvar selects = [].slice.call(document.querySelectorAll('.dselect'));\r\nselects.map(function (select) {\r\n    dselect(select, {\r\n        search: true, // Toggle search feature. Default: false\r\n        creatable: false, // Creatable selection. Default: false\r\n        clearable: false, // Clearable selection. Default: false\r\n        maxHeight: '360px', // Max height for showing scrollbar. Default: 360px\r\n        size: '' // Can be \"sm\" or \"lg\". Default ''\r\n    });\r\n});\r\n"],"names":["slice","call","document","querySelectorAll","map","select","el","option","style","display","classElement","classNoResults","classTag","classTagRemove","classPlaceholder","classClearBtn","classTogglerClearable","defaultSearch","defaultCreatable","defaultClearable","defaultMaxHeight","defaultSize","search","attrBool","creatable","clearable","maxHeight","dataset","dselectMaxHeight","size","dselectSize","classToggler","searchInput","attr","attribute","hasAttribute","getAttribute","toLowerCase","removePrev","nextElementSibling","classList","contains","remove","isPlaceholder","selectedTag","options","multiple","selectedOptions","Array","from","filter","selected","placeholderOption","tag","length","text","textContent","push","_step2","value","_iterator2","join","selectedOption","selectedIndex","innerHTML","selectedText","itemTags","_step3","items","tagName","hidden","active","disabled","_iterator3","createDom","autoclose","additionalClass","className","clearBtn","template","insertAdjacentHTML","updateDom","dropdown","toggler","getElementsByClassName","dSelectItems","dselectText","addEventListener","dselect"],"sourceRoot":""}